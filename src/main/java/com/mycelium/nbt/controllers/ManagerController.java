package com.mycelium.nbt.controllers;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.web.PageableDefaults;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.util.Arrays;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.text.SimpleDateFormat;import java.util.Date;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.PathVariable;import com.mycelium.nbt.model.dao.ChangeRequestDao;import com.mycelium.nbt.model.dao.TaskDao;import com.mycelium.nbt.model.entities.TaskEntity;import com.mycelium.nbt.controllers.TasksAndCRs;import com.mycelium.nbt.controllers.TasksAndCRs;@Controller@RequestMapping(value = "/manager")public class ManagerController {	Logger _logger = Logger.getLogger(ManagerController.class);	@Autowired	ChangeRequestDao _crDao;	@Autowired	TaskDao _taskDao;	@RequestMapping(method = RequestMethod.GET)	public ModelAndView getAnalistPage() {		ModelAndView mav = new ModelAndView("manager");		mav.addObject("crs", _crDao.findAll());		mav.addObject("tasks", _taskDao.findAll());		return mav;	}	@RequestMapping(value = "/cr/{id}", method = RequestMethod.GET)	public ModelAndView getCrsView(@PathVariable("id") String crId) {		ModelAndView mav = new ModelAndView("crView");		mav.addObject("crsView", _crDao.findOne(crId));		mav.addObject("taskss", _taskDao.findAll());		return mav;	}	@RequestMapping(value = "/task/{id}", method = RequestMethod.GET)	public ModelAndView getTaskView(@PathVariable("id") String taskId) {		ModelAndView mav = new ModelAndView("task");		mav.addObject("taskView", _taskDao.findOne(taskId));		Date dateOfCreation = _taskDao.findOne(taskId).getDateOfCreation();		SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");		String formattedDateOfCreation = sdf.format(dateOfCreation);		mav.addObject("dateOfCreation", formattedDateOfCreation);		return mav;	}	@RequestMapping(value = "/newTask", method = RequestMethod.GET)	public ModelAndView getNewTaskPage() {		ModelAndView mav = new ModelAndView("newTask");		mav.addObject("crs", _crDao.findAll());		return mav;	}	@RequestMapping(value = "/newTask/add", method = RequestMethod.POST)	public String addTask(HttpServletRequest request) throws Exception {		if (!request.getParameter("taskCaption").isEmpty()) {			String caption = request.getParameter("taskCaption");			String description = request.getParameter("taskDescription");			SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");			Date dateOfCreation;			if (request.getParameter("taskDateOfStart") != null					&& !request.getParameter("taskDateOfStart").equals(""))				dateOfCreation = sdf.parse(request						.getParameter("taskDateOfStart"));			else				dateOfCreation = new Date();			List<String> attachedCRs = new ArrayList<String>();			if (request.getParameterValues("crId") != null) {				attachedCRs = new ArrayList<String>(Arrays.asList(request						.getParameterValues("crId")));			}							TaskEntity newTask = new TaskEntity(caption, description,					attachedCRs, dateOfCreation);			_taskDao.add(newTask);		}		return "redirect:/site/manager";	}	@RequestMapping(value = "/editTask", method = RequestMethod.POST)	public String updateTask(HttpServletRequest request) throws Exception {		String id = request.getParameter("taskId");		TaskEntity updatedTask = _taskDao.findOne(id);		updatedTask.setCaption(request.getParameter("taskCaption"));		updatedTask.setDescription(request.getParameter("taskDescription"));		SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");		updatedTask.setDateOfCreation(sdf.parse(request				.getParameter("taskDateOfStart")));		if (request.getParameter("taskDateOfStart") != null				&& !request.getParameter("taskDateOfStart").equals(""))			updatedTask.setDateOfCreation(sdf.parse(request					.getParameter("taskDateOfStart")));		else			updatedTask.setDateOfCreation(new Date());		List<String> attachedCRs = new ArrayList<String>();		if (request.getParameterValues("crId") != null) {			attachedCRs = new ArrayList<String>(Arrays.asList(request					.getParameterValues("crId")));			updatedTask.setAttachedCRs(attachedCRs);		}		_taskDao.add(updatedTask);		return "redirect:/site/manager";	}	@RequestMapping(value = "/addTasksToCr", method = RequestMethod.POST, headers = { "content-type=application/json" })	public void addIssuesToCR(@RequestBody TasksAndCRs iac) {		String[] idOfCRs = iac.getIdCRList();		String[] idOfTasks = iac.getIdTaskList();		for (String idOfCR : idOfCRs) {			for (String idOfTask : idOfTasks) {				if (!_taskDao.findOne(idOfTask).getAttachedCRs()						.contains(idOfCR))					_taskDao.updateCRList(idOfTask, idOfCR);				if (!_crDao.findOne(idOfCR).getIssueIdList().contains(idOfTask))					_crDao.updateTaskIdList(idOfCR, idOfTask);			}		}	}	@RequestMapping(value = "/getInfo", method = RequestMethod.POST)	public @ResponseBody	InfoCR getInfo(@RequestBody TasksAndCRs tac) {		String[] idOfCRs = tac.getIdCRList();		InfoCR infoCR = new InfoCR();		infoCR.setIdCR(_crDao.findOne(idOfCRs[0]).getId());		infoCR.setCaptionCR(_crDao.findOne(idOfCRs[0]).getCaption());		infoCR.setDescriptionCR(_crDao.findOne(idOfCRs[0]).getDescription());		// List<String> tasksCaption=new ArrayList<String>();		/*		 * for(String taskId:_crDao.findOne(idOfCRs[0]).getTaskIdList())		 * tasksCaption.add(_taskDao.findOne(taskId).getCaption());		 * infoCR.setAssignedTasksCaption(tasksCaption);		 */		HashMap<String, String> tasksIdAndCaption = new HashMap<String, String>();		for (String taskId : _crDao.findOne(idOfCRs[0]).getTaskIdList())			tasksIdAndCaption					.put(taskId, _taskDao.findOne(taskId).getCaption());		infoCR.setTasksIdAndCaption(tasksIdAndCaption);		return infoCR;	}	@RequestMapping(value = "/delTaskFromCr", method = RequestMethod.GET)	public String delTaskFromCR(HttpServletRequest request) {		String idOfCR = request.getParameter("crId");		if (request.getParameterValues("assTasks") != null) {			_logger.warn("lala");			_crDao.delTask(idOfCR, request.getParameterValues("assTasks"));			for (String idOfTask : request.getParameterValues("assTasks"))				_taskDao.delCR(idOfTask, idOfCR);		}		return "redirect:/site/manager";	}}