package com.mycelium.nbt.model.dao;import org.apache.log4j.Logger;import org.springframework.stereotype.Service; import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.core.authority.SimpleGrantedAuthority;import java.util.List;import java.util.ArrayList;import java.util .Collection;import com.mycelium.nbt.model.entities.UserEntity;import com.mycelium.nbt.model.dao.UserDao;import  com.mycelium.nbt.model.enums.RoleType;@Servicepublic class CustomUserDetailsService  implements UserDetailsService {	Logger _logger = Logger.getLogger(CustomUserDetailsService.class);	private UserEntity user;	private RoleType role;	@Autowired	UserDao userService;	@Override	public UserDetails loadUserByUsername(String username)			throws UsernameNotFoundException {		try {			this.user = userService.findByLogin(username);			boolean enabled = true;			boolean accountNonExpired = true;			boolean credentialsNonExpired = true;			boolean accountNonLocked = true;			return new org.springframework.security.core.userdetails.User					(							this.user.getLogin(),							this.user.getPassword(),							enabled,							accountNonExpired,							credentialsNonExpired,							accountNonLocked,							getAuthorities()							);		} catch (Exception e) {			throw new RuntimeException(e);		}	}	public Collection getAuthorities() {		List authList = getGrantedAuthorities();		return authList;	}	public List getGrantedAuthorities() {		List authorities = new ArrayList();		//for (RoleType role : user.getRoles()) {		authorities.add(new SimpleGrantedAuthority(role.getById(user.getRoleId()).getCaption()));		_logger.warn(role.getById(user.getRoleId()).getCaption());		//}		return authorities;	}}